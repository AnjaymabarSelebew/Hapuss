name: Unified Multi-Account Workflow (v3.7 IssueFix)

on:
  workflow_dispatch:
    inputs:
      total_commits:
        description: "Jumlah total commit per akun"
        required: true
        default: "1650"
      total_days:
        description: "Jumlah hari pembagian commit"
        required: true
        default: "365"
      total_prs:
        description: "Jumlah Pull Request per akun"
        required: true
        default: "36"
      total_issues:
        description: "Jumlah Issue per akun"
        required: true
        default: "130"
      repo_count:
        description: "Jumlah repository tambahan per akun"
        required: true
        default: "2"
      target_repo:
        description: "Repository utama tempat aktivitas"
        required: true
        default: "anjaymabarselebew/hapuss"

jobs:
  unified:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 9
      matrix:
        include:
          - account: hakem97
            email: 62814217+Hakem97@users.noreply.github.com 
            token_secret: PAT1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Delay Awal
        run: |
          DELAY=$((5 + RANDOM % 10))
          echo "üïí Delay awal $DELAY detik untuk akun ${{ matrix.account }}..."
          sleep $DELAY

      - name: Setup Git
        run: |
          git config --global user.name "${{ matrix.account }}"
          git config --global user.email "${{ matrix.email }}"
          echo "‚úÖ Git identity diset untuk ${{ matrix.account }}"

      - name: Clone Target Repo
        env:
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
        run: |
          git clone --filter=blob:none --depth=1 https://x-access-token:${GH_TOKEN}@github.com/$TARGET_REPO repo
          cd repo
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${TARGET_REPO}.git

      - name: Create PRs (safe parallel)
        env:
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          TOTAL_PRS: ${{ github.event.inputs.total_prs }}
        run: |
          cd repo
          seq 1 $TOTAL_PRS | xargs -I{} -P 3 bash -c '
            i="{}"
            branch="auto-${{ matrix.account }}-pr-$i-$(date +%s)-$RANDOM"
            echo "Pull request #$i by ${{ matrix.account }}" > pr_${{ matrix.account }}_$i.txt
            git checkout -B "$branch"
            git add pr_${{ matrix.account }}_$i.txt
            git commit --author="${{ matrix.account }} <${{ matrix.email }}>" -m "PR otomatis #$i oleh ${{ matrix.account }}" || true
            git push -f https://x-access-token:${GH_TOKEN}@github.com/$TARGET_REPO HEAD:"$branch"
            for attempt in 1 2 3; do
              echo "üîÅ Attempt $attempt membuat PR #$i"
              gh pr create \
                --title "PR #$i dari ${{ matrix.account }}" \
                --body "PR otomatis oleh ${{ matrix.account }}" \
                --base main --head "$branch" --repo "$TARGET_REPO" && break || {
                echo "‚ö†Ô∏è Gagal PR #$i (attempt $attempt)"; sleep $((2 * attempt));
              }
            done
            sleep $((RANDOM % 3))
          '

      - name: Create Issues (safe parallel)
        env:
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          TOTAL_ISSUES: ${{ github.event.inputs.total_issues }}
        run: |
          echo "üìã Membuat $TOTAL_ISSUES issues aman (retry + delay)..."
          seq 1 $TOTAL_ISSUES | xargs -I{} -P 3 bash -c '
            i="{}"
            for attempt in 1 2 3; do
              RESPONSE=$(gh issue create \
                --title "Issue #$i dari ${{ matrix.account }}" \
                --body "Auto issue $i oleh akun ${{ matrix.account }}" \
                --repo "$TARGET_REPO" 2>&1)
              EXIT=$?
              if [ $EXIT -eq 0 ]; then
                echo "‚úÖ Issue #$i sukses dibuat oleh ${{ matrix.account }}"
                echo "$RESPONSE" | grep "https://github.com" || true
                break
              else
                echo "‚ö†Ô∏è Gagal Issue #$i (attempt $attempt): $RESPONSE"
                if echo "$RESPONSE" | grep -qE "403|404|429"; then
                  echo "üöß Kemungkinan rate-limit atau permission issue. Menunggu 5 detik..."
                  sleep 5
                fi
                sleep $((2 * attempt))
              fi
            done
            sleep $((RANDOM % 2))
          '

      - name: Create Additional Repos (same as v3.6 safe)
        env:
          PAT_TOKEN: ${{ secrets[matrix.token_secret] }}
        run: |
          set +e
          WORDS=("quantum" "nova" "lumen" "matrix" "orbit" "vector" "sigma" "neon" "fusion" "zenith" "alpha" "omega" "pulse" "nexus" "terra" "vortex" "plasma" "aether" "chrono" "helios" "astra" "echo" "draco" "titan" "ion")
          SUFFIX=("project" "service" "system" "app" "engine" "hub" "core" "cloud" "framework" "module" "node" "matrix" "unit")
          LANGS=("Python" "C++" "Go" "Swift" "Java" "JavaScript" "Ruby")
          EXT=("py" "cpp" "go" "swift" "java" "js" "rb")
          CONTENTS=(
            "print('Hello from Python!')"
            "#include <iostream>\nint main(){std::cout << \"Hello from C++!\"; return 0;}"
            "package main\nimport \"fmt\"\nfunc main(){fmt.Println(\"Hello from Go!\")}"
            "print(\"Hello from Swift!\")"
            "public class Main { public static void main(String[] args){ System.out.println(\"Hello from Java!\"); } }"
            "console.log('Hello from JavaScript!');"
            "puts 'Hello from Ruby!'"
          )

          COUNT=${{ github.event.inputs.repo_count }}
          git config --global user.name "${{ matrix.account }}"
          git config --global user.email "${{ matrix.email }}"

          echo "=== Membuat $COUNT repo unik untuk ${{ matrix.account }} ==="
          created_total=0
          while [ $created_total -lt $COUNT ]; do
            pids=()
            for slot in 1 2 3; do
              if [ $created_total -ge $COUNT ]; then break; fi
              (
                NAME="${WORDS[$RANDOM % ${#WORDS[@]}]}-${SUFFIX[$RANDOM % ${#SUFFIX[@]}]}-${WORDS[$RANDOM % ${#WORDS[@]}]}"
                echo "‚Üí Mencoba $NAME"
                exists=$(curl -s -H "Authorization: token $PAT_TOKEN" "https://api.github.com/repos/${{ matrix.account }}/$NAME" | grep -c "\"full_name\"" || true)
                if [ "$exists" -ge 1 ]; then echo "‚ö†Ô∏è Repo $NAME sudah ada"; exit 0; fi

                for attempt in 1 2 3; do
                  resp=$(curl -s -H "Authorization: token $PAT_TOKEN" -H "Accept: application/vnd.github+json" -d "{\"name\":\"$NAME\",\"auto_init\":true}" https://api.github.com/user/repos)
                  if echo "$resp" | grep -q "\"full_name\""; then
                    echo "‚úÖ Created $NAME"
                    git clone --quiet --depth=1 "https://x-access-token:${PAT_TOKEN}@github.com/${{ matrix.account }}/$NAME.git"
                    cd "$NAME"
                    LANG_INDEX=$((RANDOM % ${#LANGS[@]}))
                    echo "${CONTENTS[$LANG_INDEX]}" > "main.${EXT[$LANG_INDEX]}"
                    git add . && git commit -m "Initial commit (${LANGS[$LANG_INDEX]})" >/dev/null 2>&1
                    git push origin main --force >/dev/null 2>&1
                    cd .. && rm -rf "$NAME"
                    break
                  else
                    echo "‚ö†Ô∏è Gagal create $NAME (attempt $attempt)"; sleep 3
                  fi
                done
              ) &
              pids+=($!)
              sleep 1
            done
            for pid in "${pids[@]}"; do wait $pid || true; done
            created_total=$((created_total+3))
          done
          echo "‚úÖ Semua repo tambahan selesai!"
